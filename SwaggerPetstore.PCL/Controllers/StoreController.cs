/*
 * SwaggerPetstore.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using SwaggerPetstore.PCL;
using SwaggerPetstore.PCL.Utilities;
using SwaggerPetstore.PCL.Http.Request;
using SwaggerPetstore.PCL.Http.Response;
using SwaggerPetstore.PCL.Http.Client;
using SwaggerPetstore.PCL.Exceptions;

namespace SwaggerPetstore.PCL.Controllers
{
    public partial class StoreController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static StoreController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static StoreController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new StoreController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <param name="orderId">Required parameter: ID of pet that needs to be fetched</param>
        /// <return>Returns the Models.Order response from the API call</return>
        public Models.Order GetOrderById(long orderId)
        {
            Task<Models.Order> t = GetOrderByIdAsync(orderId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <param name="orderId">Required parameter: ID of pet that needs to be fetched</param>
        /// <return>Returns the Models.Order response from the API call</return>
        public async Task<Models.Order> GetOrderByIdAsync(long orderId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/store/order/{orderId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "orderId", orderId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid ID supplied", _context);

            if (_response.StatusCode == 404)
                throw new APIException(@"Order not found", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Order>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <param name="orderId">Required parameter: ID of the order that needs to be deleted</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteOrder(long orderId)
        {
            Task t = DeleteOrderAsync(orderId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <param name="orderId">Required parameter: ID of the order that needs to be deleted</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteOrderAsync(long orderId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/store/order/{orderId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "orderId", orderId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid ID supplied", _context);

            if (_response.StatusCode == 404)
                throw new APIException(@"Order not found", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <return>Returns the int response from the API call</return>
        public int GetInventory()
        {
            Task<int> t = GetInventoryAsync();
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <return>Returns the int response from the API call</return>
        public async Task<int> GetInventoryAsync()
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/store/inventory");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return int.Parse(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name="body">Required parameter: order placed for purchasing the pet</param>
        /// <return>Returns the Models.Order response from the API call</return>
        public Models.Order CreatePlaceOrder(Models.Order body)
        {
            Task<Models.Order> t = CreatePlaceOrderAsync(body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name="body">Required parameter: order placed for purchasing the pet</param>
        /// <return>Returns the Models.Order response from the API call</return>
        public async Task<Models.Order> CreatePlaceOrderAsync(Models.Order body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/store/order");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid Order", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Order>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 