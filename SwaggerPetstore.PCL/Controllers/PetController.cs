/*
 * SwaggerPetstore.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using SwaggerPetstore.PCL;
using SwaggerPetstore.PCL.Utilities;
using SwaggerPetstore.PCL.Http.Request;
using SwaggerPetstore.PCL.Http.Response;
using SwaggerPetstore.PCL.Http.Client;
using SwaggerPetstore.PCL.Exceptions;

namespace SwaggerPetstore.PCL.Controllers
{
    public partial class PetController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PetController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PetController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PetController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="body">Required parameter: Pet object that needs to be added to the store</param>
        /// <return>Returns the void response from the API call</return>
        public void UpdatePet(Models.Pet body)
        {
            Task t = UpdatePetAsync(body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="body">Required parameter: Pet object that needs to be added to the store</param>
        /// <return>Returns the void response from the API call</return>
        public async Task UpdatePetAsync(Models.Pet body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid ID supplied", _context);

            if (_response.StatusCode == 404)
                throw new APIException(@"Pet not found", _context);

            if (_response.StatusCode == 405)
                throw new APIException(@"Validation exception", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="body">Required parameter: Pet object that needs to be added to the store</param>
        /// <return>Returns the void response from the API call</return>
        public void AddPet(Models.Pet body)
        {
            Task t = AddPetAsync(body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="body">Required parameter: Pet object that needs to be added to the store</param>
        /// <return>Returns the void response from the API call</return>
        public async Task AddPetAsync(Models.Pet body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 405)
                throw new APIException(@"Invalid input", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <param name="tags">Required parameter: Tags to filter by</param>
        /// <return>Returns the List<Models.Pet> response from the API call</return>
        public List<Models.Pet> FindPetsByTags(List<string> tags)
        {
            Task<List<Models.Pet>> t = FindPetsByTagsAsync(tags);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <param name="tags">Required parameter: Tags to filter by</param>
        /// <return>Returns the List<Models.Pet> response from the API call</return>
        public async Task<List<Models.Pet>> FindPetsByTagsAsync(List<string> tags)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet/findByTags");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "tags", tags }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid tag value", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<Models.Pet>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name="petId">Required parameter: ID of pet to update</param>
        /// <param name="additionalMetadata">Optional parameter: Additional data to pass to server</param>
        /// <param name="file">Optional parameter: file to upload</param>
        /// <return>Returns the Models.ApiResponse response from the API call</return>
        public Models.ApiResponse UploadFile(long petId, string additionalMetadata = null, FileStreamInfo file = null)
        {
            Task<Models.ApiResponse> t = UploadFileAsync(petId, additionalMetadata, file);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name="petId">Required parameter: ID of pet to update</param>
        /// <param name="additionalMetadata">Optional parameter: Additional data to pass to server</param>
        /// <param name="file">Optional parameter: file to upload</param>
        /// <return>Returns the Models.ApiResponse response from the API call</return>
        public async Task<Models.ApiResponse> UploadFileAsync(long petId, string additionalMetadata = null, FileStreamInfo file = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet/{petId}/uploadImage");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "petId", petId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "additionalMetadata", additionalMetadata ),
                new KeyValuePair<string, object>( "file", file)
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ApiResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name="petId">Required parameter: ID of pet that needs to be updated</param>
        /// <param name="name">Optional parameter: Updated name of the pet</param>
        /// <param name="status">Optional parameter: Updated status of the pet</param>
        /// <return>Returns the void response from the API call</return>
        public void UpdatePetWithForm(long petId, string name = null, string status = null)
        {
            Task t = UpdatePetWithFormAsync(petId, name, status);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name="petId">Required parameter: ID of pet that needs to be updated</param>
        /// <param name="name">Optional parameter: Updated name of the pet</param>
        /// <param name="status">Optional parameter: Updated status of the pet</param>
        /// <return>Returns the void response from the API call</return>
        public async Task UpdatePetWithFormAsync(long petId, string name = null, string status = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet/{petId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "petId", petId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "name", name ),
                new KeyValuePair<string, object>( "status", status )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 405)
                throw new APIException(@"Invalid input", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="petId">Required parameter: Pet id to delete</param>
        /// <param name="apiKey">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void DeletePet(long petId, string apiKey = null)
        {
            Task t = DeletePetAsync(petId, apiKey);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="petId">Required parameter: Pet id to delete</param>
        /// <param name="apiKey">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeletePetAsync(long petId, string apiKey = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet/{petId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "petId", petId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "api_key", apiKey }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid ID supplied", _context);

            if (_response.StatusCode == 404)
                throw new APIException(@"Pet not found", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <param name="status">Required parameter: Status values that need to be considered for filter</param>
        /// <return>Returns the List<Models.Pet> response from the API call</return>
        public List<Models.Pet> FindPetsByStatus(List<Models.Status7Enum> status)
        {
            Task<List<Models.Pet>> t = FindPetsByStatusAsync(status);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <param name="status">Required parameter: Status values that need to be considered for filter</param>
        /// <return>Returns the List<Models.Pet> response from the API call</return>
        public async Task<List<Models.Pet>> FindPetsByStatusAsync(List<Models.Status7Enum> status)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet/findByStatus");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "status", Models.Status7EnumHelper.ToValue(status) }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid status value", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<Models.Pet>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <param name="petId">Required parameter: ID of pet to return</param>
        /// <return>Returns the Models.Pet response from the API call</return>
        public Models.Pet GetPetById(long petId)
        {
            Task<Models.Pet> t = GetPetByIdAsync(petId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <param name="petId">Required parameter: ID of pet to return</param>
        /// <return>Returns the Models.Pet response from the API call</return>
        public async Task<Models.Pet> GetPetByIdAsync(long petId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/pet/{petId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "petId", petId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Invalid ID supplied", _context);

            if (_response.StatusCode == 404)
                throw new APIException(@"Pet not found", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Pet>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 